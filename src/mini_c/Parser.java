
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 29 10:34:32 CET 2019
//----------------------------------------------------

package mini_c;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 29 10:34:32 CET 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\003\000\002\006\005\000\002\006\006" +
    "\000\002\016\004\000\002\004\010\000\002\004\012\000" +
    "\002\011\004\000\002\011\006\000\002\012\006\000\002" +
    "\017\003\000\002\017\005\000\002\017\007\000\002\017" +
    "\011\000\002\017\004\000\002\017\007\000\002\017\003" +
    "\000\002\020\003\000\002\020\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\006\000\002\021\005\000\002\021\007\000\002" +
    "\024\003\000\002\024\002\000\002\023\005\000\002\023" +
    "\003\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\002\000\002\005\004\000\002\005\002\000\002" +
    "\007\004\000\002\007\002\000\002\013\004\000\002\013" +
    "\002\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\010\002\uffcf\007\011\010\006\001\002\000" +
    "\010\002\uffcf\007\011\010\006\001\002\000\004\002\173" +
    "\001\002\000\004\004\160\001\002\000\010\002\ufffe\007" +
    "\ufffe\010\ufffe\001\002\000\004\002\000\001\002\000\004" +
    "\004\012\001\002\000\040\006\uffca\016\uffca\017\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\001\002\000" +
    "\004\016\014\001\002\000\010\007\017\010\016\017\uffd1" +
    "\001\002\000\006\017\uffd3\022\155\001\002\000\004\004" +
    "\012\001\002\000\004\004\012\001\002\000\004\017\021" +
    "\001\002\000\004\020\023\001\002\000\010\002\ufffa\007" +
    "\ufffa\010\ufffa\001\002\000\036\004\uffcd\005\uffcd\007\027" +
    "\010\025\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020" +
    "\uffcd\021\uffcd\031\uffcd\035\uffcd\036\uffcd\001\002\000\036" +
    "\004\uffcd\005\uffcd\007\027\010\025\011\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\031\uffcd\035\uffcd" +
    "\036\uffcd\001\002\000\004\004\012\001\002\000\032\004" +
    "\012\005\040\011\044\013\036\014\051\015\041\016\037" +
    "\020\023\021\uffcb\031\035\035\046\036\045\001\002\000" +
    "\004\004\012\001\002\000\004\036\034\001\002\000\006" +
    "\022\032\036\uffd6\001\002\000\004\004\012\001\002\000" +
    "\004\036\uffd7\001\002\000\036\004\ufffd\005\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020" +
    "\ufffd\021\ufffd\031\ufffd\035\ufffd\036\ufffd\001\002\000\016" +
    "\004\012\005\040\015\041\016\037\031\035\035\046\001" +
    "\002\000\004\016\133\001\002\000\016\004\012\005\040" +
    "\015\041\016\037\031\035\035\046\001\002\000\034\006" +
    "\uffeb\017\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\001" +
    "\002\000\004\016\125\001\002\000\032\004\012\005\040" +
    "\011\044\013\036\014\051\015\041\016\037\020\023\021" +
    "\uffcb\031\035\035\046\036\045\001\002\000\040\006\uffee" +
    "\016\115\017\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\036\uffee\001\002\000\004\016\107\001\002\000\034\004" +
    "\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\031\ufff5\035\ufff5\036\ufff5\001" +
    "\002\000\016\004\012\005\040\015\041\016\037\031\035" +
    "\035\046\001\002\000\030\006\061\024\060\025\057\026" +
    "\063\027\062\030\064\031\056\032\067\033\066\034\065" +
    "\036\105\001\002\000\004\021\104\001\002\000\016\004" +
    "\012\005\040\015\041\016\037\031\035\035\046\001\002" +
    "\000\036\006\uffec\017\uffec\022\uffec\023\054\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\036\uffec\001\002\000\034\004\uffef\005\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef" +
    "\021\uffef\031\uffef\035\uffef\036\uffef\001\002\000\016\004" +
    "\012\005\040\015\041\016\037\031\035\035\046\001\002" +
    "\000\034\006\061\017\uffe8\022\uffe8\024\060\025\057\026" +
    "\063\027\062\030\064\031\056\032\067\033\066\034\065" +
    "\036\uffe8\001\002\000\016\004\012\005\040\015\041\016" +
    "\037\031\035\035\046\001\002\000\016\004\012\005\040" +
    "\015\041\016\037\031\035\035\046\001\002\000\016\004" +
    "\012\005\040\015\041\016\037\031\035\035\046\001\002" +
    "\000\016\004\012\005\040\015\041\016\037\031\035\035" +
    "\046\001\002\000\016\004\012\005\040\015\041\016\037" +
    "\031\035\035\046\001\002\000\016\004\012\005\040\015" +
    "\041\016\037\031\035\035\046\001\002\000\016\004\012" +
    "\005\040\015\041\016\037\031\035\035\046\001\002\000" +
    "\004\004\072\001\002\000\016\004\012\005\040\015\041" +
    "\016\037\031\035\035\046\001\002\000\016\004\012\005" +
    "\040\015\041\016\037\031\035\035\046\001\002\000\034" +
    "\006\uffe3\017\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\065\036\uffe3" +
    "\001\002\000\034\006\uffe2\017\uffe2\022\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\065\036\uffe2\001\002\000\036\006\uffed\017\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\036\uffed\001\002\000" +
    "\034\006\uffe5\017\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\067\033\066\034\065\036" +
    "\uffe5\001\002\000\034\006\061\017\uffe7\022\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\064\031\056\032\067\033" +
    "\066\034\065\036\uffe7\001\002\000\034\006\061\017\uffe6" +
    "\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\064\031" +
    "\056\032\067\033\066\034\065\036\uffe6\001\002\000\034" +
    "\006\uffe1\017\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\064\031\056\032\067\033\066\034\065\036\uffe1" +
    "\001\002\000\034\006\061\017\uffdf\022\uffdf\024\uffdf\025" +
    "\057\026\063\027\062\030\064\031\056\032\067\033\066" +
    "\034\065\036\uffdf\001\002\000\034\006\061\017\uffe0\022" +
    "\uffe0\024\uffe0\025\uffe0\026\063\027\062\030\064\031\056" +
    "\032\067\033\066\034\065\036\uffe0\001\002\000\034\006" +
    "\uffe4\017\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\067\033\066\034\065\036\uffe4\001" +
    "\002\000\030\006\061\024\060\025\057\026\063\027\062" +
    "\030\064\031\056\032\067\033\066\034\065\036\103\001" +
    "\002\000\034\004\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\031\ufff4\035" +
    "\ufff4\036\ufff4\001\002\000\042\002\ufff6\004\ufff6\005\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\020\ufff6\021\ufff6\031\ufff6\035\ufff6\036\ufff6" +
    "\001\002\000\034\004\ufff1\005\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\031\ufff1" +
    "\035\ufff1\036\ufff1\001\002\000\034\006\uffe9\017\uffe9\022" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\065\036\uffe9\001\002\000\016\004" +
    "\012\005\040\015\041\016\037\031\035\035\046\001\002" +
    "\000\030\006\061\017\111\024\060\025\057\026\063\027" +
    "\062\030\064\031\056\032\067\033\066\034\065\001\002" +
    "\000\030\004\012\005\040\011\044\013\036\014\051\015" +
    "\041\016\037\020\023\031\035\035\046\036\045\001\002" +
    "\000\034\004\ufff3\005\ufff3\011\ufff3\012\113\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\031\ufff3\035\ufff3" +
    "\036\ufff3\001\002\000\030\004\012\005\040\011\044\013" +
    "\036\014\051\015\041\016\037\020\023\031\035\035\046" +
    "\036\045\001\002\000\034\004\ufff2\005\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\031\ufff2\035\ufff2\036\ufff2\001\002\000\020\004\012\005" +
    "\040\015\041\016\037\017\uffda\031\035\035\046\001\002" +
    "\000\004\017\123\001\002\000\004\017\uffdb\001\002\000" +
    "\032\006\061\017\uffd8\022\121\024\060\025\057\026\063" +
    "\027\062\030\064\031\056\032\067\033\066\034\065\001" +
    "\002\000\016\004\012\005\040\015\041\016\037\031\035" +
    "\035\046\001\002\000\004\017\uffd9\001\002\000\034\006" +
    "\uffde\017\uffde\022\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\001" +
    "\002\000\004\021\uffcc\001\002\000\004\010\126\001\002" +
    "\000\004\004\127\001\002\000\004\017\130\001\002\000" +
    "\034\006\uffdc\017\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036" +
    "\uffdc\001\002\000\030\006\061\017\132\024\060\025\057" +
    "\026\063\027\062\030\064\031\056\032\067\033\066\034" +
    "\065\001\002\000\034\006\uffdd\017\uffdd\022\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\036\uffdd\001\002\000\016\004\012\005\040" +
    "\015\041\016\037\031\035\035\046\001\002\000\030\006" +
    "\061\017\135\024\060\025\057\026\063\027\062\030\064" +
    "\031\056\032\067\033\066\034\065\001\002\000\030\004" +
    "\012\005\040\011\044\013\036\014\051\015\041\016\037" +
    "\020\023\031\035\035\046\036\045\001\002\000\034\004" +
    "\ufff0\005\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\020\ufff0\021\ufff0\031\ufff0\035\ufff0\036\ufff0\001" +
    "\002\000\034\006\uffea\017\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\065\036\uffea\001\002\000\004\032\143\001\002\000\004" +
    "\036\147\001\002\000\006\022\145\036\uffd4\001\002\000" +
    "\004\004\012\001\002\000\006\022\ufffb\036\ufffb\001\002" +
    "\000\004\032\143\001\002\000\004\036\uffd5\001\002\000" +
    "\036\004\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\031\ufffc\035" +
    "\ufffc\036\ufffc\001\002\000\032\004\uffce\005\uffce\011\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\031" +
    "\uffce\035\uffce\036\uffce\001\002\000\006\017\ufff8\022\ufff8" +
    "\001\002\000\004\032\153\001\002\000\004\004\012\001" +
    "\002\000\006\017\ufff7\022\ufff7\001\002\000\010\007\017" +
    "\010\016\017\uffd1\001\002\000\004\017\uffd2\001\002\000" +
    "\004\032\165\001\002\000\006\020\161\032\uffca\001\002" +
    "\000\010\007\027\010\025\021\uffcd\001\002\000\004\021" +
    "\163\001\002\000\004\036\164\001\002\000\010\002\uffff" +
    "\007\uffff\010\uffff\001\002\000\004\004\012\001\002\000" +
    "\004\016\167\001\002\000\010\007\017\010\016\017\uffd1" +
    "\001\002\000\004\017\171\001\002\000\004\020\023\001" +
    "\002\000\010\002\ufff9\007\ufff9\010\ufff9\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\012\002\004\003\003\004\006\005\007\001" +
    "\001\000\010\003\003\004\006\005\173\001\001\000\002" +
    "\001\001\000\004\022\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\017\011\014\001\001\000" +
    "\002\001\001\000\004\022\151\001\001\000\004\022\150" +
    "\001\001\000\002\001\001\000\004\012\021\001\001\000" +
    "\002\001\001\000\006\006\023\007\025\001\001\000\006" +
    "\006\023\007\147\001\001\000\004\022\137\001\001\000" +
    "\016\012\052\013\047\017\041\020\051\021\046\022\042" +
    "\001\001\000\006\014\027\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\032\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\051\021" +
    "\136\022\042\001\001\000\002\001\001\000\010\020\051" +
    "\021\130\022\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\052\013\123\017\041\020\051\021\046" +
    "\022\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\051\021\105\022\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\051\021" +
    "\101\022\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\051\021\054\022\042\001\001\000\002\001" +
    "\001\000\010\020\051\021\100\022\042\001\001\000\010" +
    "\020\051\021\077\022\042\001\001\000\010\020\051\021" +
    "\076\022\042\001\001\000\010\020\051\021\075\022\042" +
    "\001\001\000\010\020\051\021\074\022\042\001\001\000" +
    "\010\020\051\021\073\022\042\001\001\000\010\020\051" +
    "\021\072\022\042\001\001\000\002\001\001\000\010\020" +
    "\051\021\070\022\042\001\001\000\010\020\051\021\067" +
    "\022\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\051\021\107\022\042\001\001\000\002\001\001" +
    "\000\014\012\052\017\111\020\051\021\046\022\042\001" +
    "\001\000\002\001\001\000\014\012\052\017\113\020\051" +
    "\021\046\022\042\001\001\000\002\001\001\000\014\020" +
    "\051\021\117\022\042\023\116\024\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\051\021\117\022\042\023\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\051\021\133\022" +
    "\042\001\001\000\002\001\001\000\014\012\052\017\135" +
    "\020\051\021\046\022\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\140\016\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\143\001\001\000" +
    "\002\001\001\000\006\015\145\016\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\153\001\001\000\002" +
    "\001\001\000\006\010\155\011\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\023" +
    "\007\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\165\001\001\000\002\001\001" +
    "\000\006\010\167\011\014\001\001\000\002\001\001\000" +
    "\004\012\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ident ::= IDENT 
            {
              Pstring RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pstring(id, new Loc(idleft, idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_stmt ::= 
            {
              LinkedList<Pstmt> RESULT =null;
		 RESULT = new LinkedList<Pstmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_stmt ::= stmt list_stmt 
            {
              LinkedList<Pstmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pstmt s = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pstmt> l = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_decl_var ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_decl_var ::= decl_var list_decl_var 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pdeclvar> d = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 for (Pdeclvar x: d) l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_decl ::= 
            {
              LinkedList<Pdecl> RESULT =null;
		 RESULT = new LinkedList<Pdecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_decl ::= decl list_decl 
            {
              LinkedList<Pdecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(d); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_comma_formal ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_comma_formal ::= formal COMMA list_comma_formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_comma_formal ::= formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
   	  l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nonempty_list_comma_star_ident ::= star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nonempty_list_comma_star_ident ::= star_ident COMMA nonempty_list_comma_star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nonempty_list_comma_ident ::= ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nonempty_list_comma_ident ::= ident COMMA nonempty_list_comma_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pexpr> l = new LinkedList<Pexpr>();
      l.add(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_comma_expr ::= 
            {
              LinkedList<Pexpr> RESULT =null;
		 RESULT = new LinkedList<Pexpr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= SIZEOF LP STRUCT IDENT RP 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Psizeof(id, new Loc(opleft, opright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LP expr RP 
            {
              Pexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ident LP list_comma_expr RP 
            {
              Pexpr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pcall (f, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr BARBAR expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bor, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr AMPAMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Band, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr CMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(c, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DIV expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bdiv, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr TIMES expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bmul, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bsub, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr PLUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Badd, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr NEQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bneq, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr EQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Beq, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= lvalue EQUAL expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Plvalue e1 = (Plvalue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Passign(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= NOT expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Unot, e1, new Loc(opleft, opright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= MINUS expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Uneg, e1, new Loc(opleft, opright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= INTEGER 
            {
              Pexpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pint(c, new Loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= lvalue 
            {
              Pexpr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plvalue lv = (Plvalue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lvalue ::= expr ARROW IDENT 
            {
              Plvalue RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parrow(e1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lvalue ::= ident 
            {
              Plvalue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pident(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= bloc 
            {
              Pstmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= WHILE LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pwhile(c, s1, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Peval(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt s2 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pif(c, s1, s2, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= IF LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Loc locif = new Loc(locleft, locright);
       RESULT =  new Pif(c, s1, new Pskip(locif), locif); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= RETURN expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Preturn(e, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pskip(new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloc ::= LBRA list_decl_var list_stmt RBRA 
            {
              Pbloc RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> vl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pstmt> sl = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pbloc(vl, sl, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloc",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal ::= STRUCT ident TIMES ident 
            {
              Pdeclvar RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pdeclvar(new PTstruct(s), x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal ::= INT ident 
            {
              Pdeclvar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pdeclvar(Ptype.ptint, x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_fun ::= STRUCT ident TIMES ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pfun(new PTstruct(s), f, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fun",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_fun ::= INT ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pfun(Ptype.ptint, f, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fun",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // star_ident ::= TIMES ident 
            {
              Pstring RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star_ident",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_var ::= STRUCT ident nonempty_list_comma_star_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       Ptype ty = new PTstruct(s);
       for (Pstring x: xl) l.add(new Pdeclvar(ty, x));
       RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_var ::= INT nonempty_list_comma_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       for (Pstring x: xl) l.add(new Pdeclvar(Ptype.ptint, x));
       RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl ::= decl_fun 
            {
              Pdecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl ::= STRUCT IDENT LBRA list_decl_var RBRA SEMICOLON 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> fl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Pstruct(s, fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_decl 
            {
              Pfile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pfile(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pfile start_val = (Pfile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

