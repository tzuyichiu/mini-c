#!/bin/bash

shopt -s nullglob

# testing script for the compilation project

option=$1
compilo=$2
score=0
max=0
verbose=0


echo "Test for $compilo"

echo

# every test is done with gcc
test_gcc() {
for f in syntax/bad/*.c; do
    if gcc -c $f > /dev/null 2>&1 ; then
        echo "success of gcc -c on $f"; exit 1
    fi
done

for f in typing/good/*.c exec/*.c exec-fail/*.c; do
    gcc -c $f > /dev/null 2>&1 ||
    (echo "failure of gcc on $f"; exit 1)
done
for f in typing/bad/*.c; do
    if gcc -c $f > /dev/null 2>&1 ; then
        echo "success of gcc -c on $f"; exit 1
    fi
done
for f in exec/*.c; do
    if test $f == exec/sizeof1.c; then continue; fi
    if test $f == exec/sizeof2.c; then continue; fi
    echo "test gcc on $f"
    expected=exec/`basename $f .c`.out
    if gcc $f > /dev/null 2>&1 ; then
        ./a.out > out
        if ! cmp --quiet out $expected; then
            echo "wrong output of gcc on $f"; exit 1
        fi
    else
        echo "failure of gcc -c on $f"; exit 1
    fi
done
}

compile () {
if [[ $verbose != 0 ]]; then
    echo Compile $1 $2
    $compilo $1 $2;
else
    $compilo $1 $2 > /dev/null 2>&1;
fi;
}


# Part 1: syntactic analysis tests

part1 () {

score=0
max=0

echo "Part 1"

# bad ones
echo -n "bad "
for f in syntax/bad/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"0")
	echo
	echo "FAILURE on "$f" (should fail)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a wrong reason)";;
    esac
done
echo

# good ones
echo -n "good "
for f in syntax/good/*.c typing/bad/*.c typing/good/*.c exec/*.c exec-fail/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"1")
	echo
	echo "FAILURE on "$f" (should succeed)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a wrong reason)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo -n "Syntax: $score/$max : $percent%"; }

# Part 2: semantic analysis tests

part2 () {
echo
echo "Part 2"

score=0
max=0

# bad ones
echo -n "bad "
for f in typing/bad/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --type-only $f;
    case $? in
	"0")
	echo
	echo "FAILURE on "$f" (should fail)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a wrong reason)";;
    esac
done
echo

# good ones
echo -n "good "
for f in typing/good/*.c exec/*.c exec-fail/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --type-only $f;
    case $? in
	"1")
	echo
	echo "FAILURE on "$f" (should succeed)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a wrong reason)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo    "Typage  : $score/$max : $percent%";
}


# Part 3: interpretation tests

part3i () {

score_comp=0
score_test=0
max=0

echo
echo "Interpretation"
echo "Normal execution"
echo "-----------------"

# timeout="why3-cpulimit 30 0 -h"

for f in exec/*.c; do
    echo -n "."
    expected=exec/`basename $f .c`.out
    max=`expr $max + 1`;
    rm -f out
    if $compilo $f > out; then
	score_comp=`expr $score_comp + 1`;
	if cmp --quiet out $expected; then
	    score_test=`expr $score_test + 1`
	else
	    echo
	    echo "FAILURE: wrong output for $f"
	fi
    else
	echo
	echo "FAILURE of the compiler on $f (should succeed)"
    fi
done
echo

echo "Execution leading to a failure"
echo "-------------------------------"

for f in exec-fail/*.c; do
    echo -n "."
    max=`expr $max + 1`;
    if $compilo $f > /dev/null 2>&1; then
        echo
	echo "FAILURE: the code $f should fail"
    else
	score_test=`expr $score_test + 1`;
	score_comp=`expr $score_comp + 1`;
    fi
done

echo
percent=`expr 100 \* $score / $max`;

echo "Compilation:";
percent=`expr 100 \* $score_comp / $max`;
echo "Compilation: $score_comp/$max : $percent%";
percent=`expr 100 \* $score_test / $max`;
echo "Code behavior: $score_test/$max : $percent%";}

part3 () {

score_comp=0
score_out=0
score_test=0
max=0

echo
echo "Part 3"
echo "Normal execution"
echo "-----------------"

# timeout="why3-cpulimit 30 0 -h"

for f in exec/*.c; do
    echo -n "."
    asm=exec/`basename $f .c`.s
    rm -f $asm
    expected=exec/`basename $f .c`.out
    max=`expr $max + 1`;
    if compile $f; then
	rm -f out
	score_comp=`expr $score_comp + 1`;
	if gcc $asm && ./a.out > out; then
	    score_out=`expr $score_out + 1`;
	    if cmp --quiet out $expected; then
		score_test=`expr $score_test + 1`;
	    else
		echo
		echo "FAILURE: wrong output for $f"
	    fi
	else
		echo
		echo "FAILURE of the produced code for $f"
	fi
    else
	echo
	echo "FAILURE of the compiler on $f (should succeed)"
    fi
done
echo

echo "Execution leading to a failure"
echo "-------------------------------"

for f in exec-fail/*.c; do
    echo -n "."
    asm=exec-fail/`basename $f .c`.s
    rm -f $asm
    max=`expr $max + 1`;
    if compile $f && gcc $asm; then
	score_comp=`expr $score_comp + 1`;
	if ./a.out > out; then
	    echo
	    echo "FAILURE: the code $f should fail"
	else
	    score_test=`expr $score_test + 1`;
	    score_out=`expr $score_out + 1`;
	fi
    else
	echo
	echo "FAILURE of the compiler on $f (should succeed)"
    fi
done

echo
percent=`expr 100 \* $score / $max`;

echo "Compilation:";
percent=`expr 100 \* $score_comp / $max`;
echo "Compilation: $score_comp/$max : $percent%";
percent=`expr 100 \* $score_out / $max`;
echo "Produced code: $score_out/$max : $percent%";
percent=`expr 100 \* $score_test / $max`;
echo "Code behavior: $score_test/$max : $percent%";}


case $option in
    "-1" )
        part1;;
    "-2" )
        part2;;
    "-i" )
        part3i;;
    "-3" )
        part3;;
    "-v1" )
	verbose=1;
	part1;;
    "-v2" )
    	verbose=1;
        part2;;
    "-v3" )
    	verbose=1;
        part3;;
    "-all" )
    	part1;
    	part2;
    	part3;;
    "-gcc" )
        test_gcc;;
    * )
        echo "usage: $0 <option> <compilo>"
        echo "specify an option among: "
        echo "-1  : test the syntactic analysis"
        echo "-2  : test the typing"
        echo "-3  : test the compilation"
        echo "-v1 : test syntactic analysis (verbosely)"
        echo "-v2 : test le typage (verbosely)"
        echo "-v3 : test the compilation (verbosely)"
        echo "-all: test everything";;

esac
echo
